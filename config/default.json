//NEEDS DOCUMENTATION https://www.gitbook.com/book/poster983/passport-developer

{	
	"userGroups": { 
		"student": {
			"permissions": {
				"dashboards": ["student"], // what they can login to.  this is going to be put directly into the url that the index.js route sends the user to, so it MUST match an existing route
				"allowedEmailDomains": ["@gmail.com", "@outlook.com"] //User must signup with these domain endings OR put false if you want to allow any domain.
			},
			"verifyAccountCreation": false //When creating an account, the user will be required to input a random key assigned by an admin.
		},
		"teacher": {
			"permissions": {
				"dashboards": ["teacher"], // what they can login to.  this is going to be put directly into the url that the index.js route sends the user to, so it MUST match an existing route
				"allowedEmailDomains": ["@gmail.com", "@outlook.com"] //User must signup with these domain endings OR put false if you want to allow any domain.

			},
			"passes": { //by defining "passes" this will show up in the pass groups get api
				"preferSearch": true, //tells programs via api that inorder to find the person, they must use a search.  Otherwise a select is used(if implemented)
				"viewName": "Teachers" //friendly name
			},
			"hasClasses": true, //Means that students COULD leave from their period.  
			"verifyAccountCreation": true //When creating an account, the user will be required to input a random key assigned by an admin.
		},
		"lc": {
			
			"permissions": {
				"dashboards": ["teacher", "kiosk"], // what they can login to.  this is going to be put directly into the url that the index.js route sends the user to, so it MUST match an existing route
				"allowedEmailDomains": ["@gmail.com", "@outlook.com"] //User must signup with these domain endings OR put false if you want to allow any domain.

			},
			"passes": { //by defining "passes" this will show up in the pass groups get api
				"preferSearch": false, //tells programs via api that inorder to find the person, they must use a search.  Otherwise a select is used(if implemented)
				"viewName": "LC", //friendly name
				"useCustomName": true //will prompt user to enter a destination name at account setup instead of showing name with pass groups.
			},
			"verifyAccountCreation": true //When creating an account, the user will be required to input a random key assigned by an admin.
		},
		"counselor": {
			"permissions": {
				"dashboards": ["teacher"], // what they can login to.  this is going to be put directly into the url that the index.js route sends the user to, so it MUST match an existing route
				"allowedEmailDomains": ["@gmail.com", "@outlook.com"] //User must signup with these domain endings OR put false if you want to allow any domain.

			},
			"passes": { //by defining "passes" this will show up in the pass groups get api
				"preferSearch": false, //tells programs via api that inorder to find the person, they must use a search.  Otherwise a select is used(if implemented)
				"viewName": "Counselors" //friendly name
			},
			"hasClasses": true, //Means that students COULD leave from their period.  
			"verifyAccountCreation": true //When creating an account, the user will be required to input a random key assigned by an admin.
		},
		"administrator": {
			"permissions": {
				"dashboards": ["administrator"], // what they can login to.  this is going to be put directly into the url that the index.js route sends the user to, so it MUST match an existing route
				"allowedEmailDomains": ["@gmail.com", "@outlook.com"] //User must signup with these domain endings OR put false if you want to allow any domain.

			},
			"verifyAccountCreation": true //When creating an account, the user will be required to input a random key assigned by an admin.
		},
		"dev": {
			"permissions": {
				"dashboards": ["student", "teacher", "kiosk", "administration", "admin"] // what they can login to.  this is going to be put directly into the url that the index.js route sends the user to, so it MUST match an existing route

			},
			"verifyAccountCreation": true //When creating an account, the user will be required to input a random key assigned by an admin.
		},
	},
	"dashboards": {
		"student": {
			//todo: 
		}
	},
	"rethinkdb": {
		"host": "localhost",
		"port": 28015,
		"database": "passport",
		"password": "" //Dont Change.  Use local.json
	},
	"server": {
		"httpPort": 3000, //set in production config file, 80 or 8080 with a redirect firewall rule
		"httpsPort": 3443 //set in production config file, 8443
	},
	"schedule": { 
		"periods": ["a", "b", "c", "d", "e1", "lunch2", "lunch1", "e2", "f", "g", "h", "flex", "m", "home"],//Constant Period names for the schedule feature.   Weird things my happen if changed durring school year
		"daysOfTheWeek": { //Choose what days have school
			"monday": true,
			"tuesday": true,
			"wednesday": true,
			"thursday": true,
			"friday": true,
			"saturday": false, //if you set this to "true", you are a monster
			"sunday": false
		}
	},
	"misc": {
		"storeSessionToDisc": true //set in production config file, false
	},
	"secrets": {  //DO NOT CHAnGE! CREATE A local.json FILE AND PASTE secrets INTO IT
		"api-secret-key": "123456", //for use with jwt
		"session-key": "6543210",
		"cookie-secret": "159753",
		"loggingDSN": "https://sfgdgfsdfgsdgfsdgfsdgfgfsd:sfgdfgsdgfsdfgsdgf@sentry.io/123456",
		"OAuth": {
			"yourKeyHere": "12345"
		}
	},
	"nodemailerConfig": { //set null for no email, but if you want to connect it, nodemailer.createTransport options should be used here. 
	    "host": "smtp.example.com",
	    "port": 465,
	    "secure": true, // secure:true for port 465, secure:false for port 587
	    "auth": {
	        "user": "username@example.com",
	        "pass": "userpass"
	    }
	} 
}