#!/usr/bin/env node

/*
  Passport-Live is a modern web app for schools that helps them manage passes.
    Copyright (C) 2017  Joseph Hassell

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

email: hi@josephhassell.com
*/






/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var config = require("config");
var exports = module.exports = {};

/**
 * Get port from environment and store in Express.
 */
// 
var httpPort = normalizePort(config.get("server.httpPort") || '3000');
var httpsPort = normalizePort(config.get("server.https.port") || '3443');
app.set('httpPort', httpPort);
app.set('httpsPort', httpsPort);

/**
 * Create HTTP server.
 */
//Green Lock 
var lexServer = "staging";
if(process.env.NODE_ENV == "production") {
  lexServer = "https://acme-v01.api.letsencrypt.org/directory"
} else {
  lexServer = "staging"
}
var lex = require('greenlock-express').create({
  server: lexServer,
  approveDomains: approveDomains
});
function approveDomains(opts, certs, done) {
    if (certs) {
      opts.domains = certs.altnames;
    } else {
      opts.email = config.get("server.https.email");
      opts.agreeTos = true;
    }
    done(null, { options: opts, certs: certs });
}

//var httpServer = http.createServer(app);
if(process.env.NODE_ENV == "production") {
  var httpServer = http.createServer(lex.middleware(require('redirect-https')()));
} else {
  var httpServer = http.createServer(app);
}
var httpsServer = require('https').createServer(lex.httpsOptions, lex.middleware(app))
/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(httpPort);
httpServer.on('error', onError);
httpServer.on('listening', httpOnListening);

httpsServer.listen(httpsPort);
httpsServer.on('error', onError);
httpsServer.on('listening', httpsOnListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function httpOnListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  //debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
function httpsOnListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  //debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}

process.on('SIGINT', function() {
  //socket.close();
  console.log("Close")
  httpServer.close();
  httpsServer.close();
  process.exit();
});

exports.closeServer = function(){
  httpServer.close();
  httpsServer.close();
};

