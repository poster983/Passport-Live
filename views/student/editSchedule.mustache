<!--
Passport-Live is a modern web app for schools that helps them manage passes.
    Copyright (C) 2017  Joseph Hassell

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

email: hi@josephhassell.com
-->
<div class="progress" id="loader" style="position: absolute; display:none;">
  <div class="indeterminate"></div>
</div>
<!--The NAv-->
<nav>
    <div class="nav-wrapper">
      <a href="#" class="brand-logo right">My Schedule</a>
      <a href=""><i class=" left-allign nav-sandwich material-icons" id="mixenSEBack">arrow_back</i></a>
    </div>
</nav>


<!--THe FAB-->
<div class="fixed-action-btn">
    <a class="btn-floating btn-large red waves-effect waves-light pulse disabled" id="mixenSESave" onclick="se.submit();">
      <i class="large material-icons">save</i>
    </a>
  </div>

<!-- THe page -->
<div class="container">

  <div id="SETable"> 
    <div class="row">
      <div class="col s12">
        <div class="card">
          <div class="card-content">
            <span class="card-title">My Schedule</span>
            <div id="editScheduleContainer"></div>
            <table class="striped">
                <thead>
                    <tr>
                        <th>Period Name</th>
                        <th>Scheduled Teacher</th>
                        <th>Notes</th>
                    </tr>
                </thead>
                <tbody id="scheduleEditorBody">
                    
                </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


<!--Feature Disc -->

  <div class="tap-target" id="unsaveConfirm"  data-activates="mixenSESave">
    <div class="tap-target-content">
      <h5>You have unsaved work</h5>
      <p>To discard hit the <i class=" material-icons">backspace</i> button</p>
    </div>
  </div>

<script type="text/javascript">
var se = {};
se.hasExistingSchedule = true;
se.getPeriodConstants = function(done) {
    $.ajax({
      type: "get",
      url: "/api/server/config/schedule/",
      dataType: "json",
      beforeSend: function(xhr){xhr.setRequestHeader('X-XSRF-TOKEN', getCookie("XSRF-TOKEN"));},
      success: function(data) {done(null, data)},
      error: function(jqXHR) {done(jqXHR)}                      
    });
}

se.initSchedulePage = function() {
  $("#mixenSESave").removeClass("disabled");
  se.getPeriodConstants(function(err, periods) {
    if(err) {
      return errorHand(err);
    }
    for(var x = 0; x < periods.periods.length; x++) {
      var perTID = uuidv4() + "disablePeriod";
      var per = $("<td/>").append($("<div/>").addClass(" col m3 s12")
                    .html(periods.periods[x])
                    .attr("data-period", periods.periods[x])
                    ).append($("<div/>").addClass(" col m9 s12").append($("<input/>")
                                      .attr("type", "checkbox")
                                      .addClass("filled-in")
                                      .attr("data-period-disable", periods.periods[x])
                                      .attr("id", perTID)
                                      .attr("value", true)

                          ).append($("<label/>")
                                      .attr("for", perTID)
                                      .html("No Period")
                          ));

      var teacherTID = uuidv4() + "autoCompleteSE";
      var teacher = $("<td/>").append($("<div/>").addClass("input-field col m9 s12")
                          .append($("<input/>")
                          .attr("type", "text")
                          .attr("scheduleEditor", true)
                          .attr("data-teacher-period", periods.periods[x])
                          .attr("id", teacherTID)
                          .attr("name", teacherTID)
                          .addClass("autocomplete validate")).append(
                                  $("<label/>")
                                      .attr("for", teacherTID)
                                      .html("Search Teachers")
                          )).append($("<div/>").addClass(" col m3 s12").append($("<input/>")
                                      .attr("type", "checkbox")
                                      .addClass("filled-in")
                                      .attr("data-teacher-none-period", periods.periods[x])
                                      .attr("id", teacherTID+"None")
                                      .attr("value", true)
                          ).append($("<label/>")
                                      .attr("for", teacherTID+"None")
                                      .html("No Teacher")
                          ));

      var tr = $("<tr/>")
                    .append(per)
                    .append(teacher)
                    .append("")
      $("#scheduleEditorBody").append(tr);

      //on done
      if(x >= periods.periods.length -1) {
        se.initAutocomplete([]);
      }
    }
  })
}

se.initAutocomplete = function() {
  se.getTeacheingTeachers(function(err, teachers) {
    if(err) {
      return errorHand(err)
    }
    var newDataAuto = {};

    console.log(teachers)
    for(var x = 0; x < teachers.length; x++) {

      if(teachers[x].name.salutation) {
        newDataAuto[teachers[x].name.salutation + ' ' + teachers[x].name.first + ' ' + teachers[x].name.last + ' --- ' + teachers[x].email] = null;
      } else {
        newDataAuto[teachers[x].name.first + ' ' + teachers[x].name.last + ' --- ' + teachers[x].email] = null;
      }
      if(x >= teachers.length-1) {
        console.log(newDataAuto)
        $('input.autocomplete[scheduleEditor=true]').autocomplete({
          data: newDataAuto,
          limit: 20, // The max amount of results that can be shown at once. Default: Infinity.
          onAutocomplete: function(val) {
            // Callback function when value is autcompleted.
            
          },
          minLength: 1, // The minimum length of the input for the autocomplete to start. Default: 1.
        });
      }
    }

    
  });
  
}

se.getTeacheingTeachers = function(done) {
  $.ajax({
      type: "get",
      url: "/api/account/hasClasses",
      dataType: "json",
      beforeSend: function(xhr){xhr.setRequestHeader('X-XSRF-TOKEN', getCookie("XSRF-TOKEN"));},
      success: function(data) {done(null, data)},
      error: function(jqXHR) {done(jqXHR)}                      
    });
}
se.setMySchedule = function() {
  getMySchedules(function(err, sch) {
    if(err) {
      return errorHand(err)
    }
  })
}

se.searchAccountsByEmail = function(email, done) {
  if(!email) {
    var err = new Error("No Email")
      return done(err, null);
    }
   $.ajax({
    type: "get",
    url: "/api/account/email/" + email,
    dataType: "json",
    beforeSend: function(xhr){xhr.setRequestHeader('X-XSRF-TOKEN', getCookie("XSRF-TOKEN"));},
    success: function(data) {done(null, data)},
    error: function(jqXHR) {done(jqXHR)}                      
  });
}

se.updateSchedule = function(scheduleBody, done) {
  if(!scheduleBody) {
    var err = new Error("scheduleBody Not Compiled")
      return done(err, null);
    }
   $.ajax({
    type: "patch",
    url: "/api/account/schedule/student",
    data: scheduleBody,
    dataType: "json",
    beforeSend: function(xhr){xhr.setRequestHeader('X-XSRF-TOKEN', getCookie("XSRF-TOKEN"));},
    success: function(data) {done(null, data)},
    error: function(jqXHR) {done(jqXHR)}                      
  });
}

se.newSchedule = function(scheduleBody, done) {
  if(!scheduleBody) {
    var err = new Error("scheduleBody Not Compiled")
      return done(err, null);
    }
   $.ajax({
    type: "post",
    url: "/api/account/schedule/student",
    data: scheduleBody,
    dataType: "json",
    beforeSend: function(xhr){xhr.setRequestHeader('X-XSRF-TOKEN', getCookie("XSRF-TOKEN"));},
    success: function(data) {done(null, data)},
    error: function(jqXHR) {done(jqXHR)}                      
  });
}

se.submit = function() {
  $("#loader").slideDown(500);
  $("#mixenSESave").addClass("disabled");
  se.compileForm(function(err, comSchedule) {
    if(err) {
      $("#loader").slideUp(500);
      $("#mixenSESave").removeClass("disabled");
      return errorHand(err);
    }
    if(se.hasExistingSchedule) {
      se.updateSchedule(comSchedule, function(err, sum) {
        if(err) {
          $("#loader").slideUp(500);
          $("#mixenSESave").removeClass("disabled");
          return errorHand(err);
        }
        $("#loader").slideUp(500);
        loadMySchedules()
        closePage('scheduleEditor');
        materialResponse("check", "success");
      })
    } else {
      se.newSchedule(comSchedule, function(err, sum) {
        if(err) {
          $("#loader").slideUp(500);
          $("#mixenSESave").removeClass("disabled");
          return errorHand(err);
        }
        $("#loader").slideUp(500);
        loadMySchedules()
        closePage('scheduleEditor');
        materialResponse("check", "success");
      })
    }
  })
  
}

se.compileForm = function(done) {
  se.getPeriodConstants(function(err, periods) {
    if(err) {
      return done(err)
    }
    se.compileFormRec(periods.periods, {}, function(err, comSchedule) {
      if(err) {
        return done(err);
      }
      console.log(comSchedule)
      return done(null, comSchedule)
    })
    
  })
}

se.compileFormRec = function(periods, comSchedule, done) {
  if(periods.length <= 0) {
    return done(null, comSchedule);
  }
  if($("input:checkbox[data-period-disable='" + periods[0] + "']:checked").val() == "true") {
    comSchedule[periods[0]] = false;
    return se.compileFormRec(periods.slice(1), comSchedule, done);
  } else if($("input:checkbox[data-teacher-none-period='" + periods[0] + "']:checked").val() == "true") {
    console.log("No Teacher")
    comSchedule[periods[0]] = {
      teacherID: null
    }
    return se.compileFormRec(periods.slice(1), comSchedule, done);
  } else {
    var val = $("input[data-teacher-period='" + periods[0] + "']").val()
    if (val.indexOf(" --- ") == -1) {
      var err = new Error("Period \"" + periods[0].toUpperCase() + "\" teacher field invalid.  Please use the autocomplete function or check one of the checkboxes ");
      $("input[data-teacher-period='" + periods[0] + "']").removeClass("valid").addClass("invalid");
      return done(err);
    }
    var person = val.substring(val.indexOf(" --- ") +5);
    se.searchAccountsByEmail(person, function(err, idArr) {
      console.log(err)
      console.log(idArr)
      if(err) {
        return done(err);
      }
      if(idArr.length > 1 ) {
        err = new Error("Conflicting Emails for period \"" + periods[0].toUpperCase() + "\"");
        return done(err);
      }
      if(idArr.length == 0 ) {
        err = new Error("No Emails Found for period \"" + periods[0].toUpperCase() + "\"");
        return done(err);
      }

      comSchedule[periods[0]] = {
        teacherID: idArr[0].id
      }

      return se.compileFormRec(periods.slice(1), comSchedule, done);
    })
  }

}
</script>